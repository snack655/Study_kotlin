시작 시점에 대한 속성

필요한 경우 launch()나 async()에 인자를 지정해 코루틴에 필요한 속성을 줄 수 있다.
먼저 launch() 함수의 원형을 간략히 살펴보자.

public fun launch(
    context: CoroutineContext,
    start: CoroutineStart,
    parent, Job?,
    onCompletion: CompletionHandler?,
    block: suspend CoroutineScope.() -> Unit): Job {
    ...
}

context 매개변수 이외에도 start 매개변수를 지정할 수 있는데
CoroutineStart는 다음과 같은 시작 방법을 정의할 수 있다.

- DEFAULT: 즉시 시작
- LAZY: 코루틴을 느리게 시작(처음에는 중단된 상태이며 start()나 await() 등으로 시작됨)
- ATOMIC: 최적화된 방법으로 시작
- UNDISPATCHED: 분산 처리 방법으로 시작

예를 들어 매개변수 이름을 사용해 다음과 같이 지정하면
start() 혹은 await()가 호출될 때 실제로 루틴이 시작된다.

val job = async(start = CoroutineStart.Lazy) { doWork1() }
...
job.start() // 실제 시작 시점으로 또는 job.await()으로 시작됨
