async 코루틴 빌더 생성하기

async를 사용해 보자.
async도 새로운 코루틴을 실행할 수 있는데 launch와 다른 점은
Deffered<T>를 통해 결괏값을 반환한다는 것이다.
이때 지연된 결괏값을 받기 위해 await()를 사용할 수 있다.

AsyncSuspend.kt를 보자.

doWork1()과 doWork2()는 async에 의해 감싸져 있으므로 완전히 병행 수행할 수 있다.
여기서는 delay()로 1초만 지연시킨 doWork1()이 먼저 종료되리라 예측할 수 있다.
그러나 좀 더 복잡한 루틴을 작성하는 경우에는 많은 태스크들과 같이 병행 수행되므로
어떤 루틴이 먼저 종료될지 알기 어렵다.
따라서 태스크가 종료되는 시점을 기다렸다가 결과를 받을 수 있도록 await()를 사용해 현재
스래드의 블로킹 없이 먼저 종료되고 결과가 반환되면 문자를 합쳐서 할당한다.
여기서는 combined라는 변수에 2개의 비동기 루틴이 종료되고 결과가 반환되면 문자를 합쳐서 할당한다.

이런 기법은 어디에 주로 사용할까?
예를 들어 안드로이드 UI 스레드에서 블로킹 가능성이 있는 코드를 사용하면
애플리케이션이 중단되거나 멈추는 경우가 발생할 수 있는데,
이 경우 await()를 사용하면 UI를 제외한 루틴만 블로킹되므로 UI가 멈추는 경우를 해결할 수 있다.