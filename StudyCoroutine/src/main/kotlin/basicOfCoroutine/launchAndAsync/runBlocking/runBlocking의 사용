runBlocking의 사용

runBlocking은 새로운 코루틴을 실행하고 완료되기 전까지 현재 스레드를 블로킹한다.
다음과 같이 runBlocking에서는 지연 함수를 사용할 수 있다.
이것은 블록을 2초 정도 붙잡아 둔다.

runBlocking {
    delay(2000)
}

앞 예제에서는 main 블록, 즉 메인 스레드가 종료되어 나가는 것을 방지하기 위해
readLine() 함수를 사용했는데 메인 스레드 자체를 잡아두기 위해
다음과 같이 main() 함수 자체를 블로킹 모드에서 실행할 수 있다.
RunBlockingTest.kt에서 확인하자.

main() 함수에서 블로킹 모드로 동작하기 때문에
main() 함수 내부의 코루틴이 모두 작동할 때까지
delay() 함수를 사용해 기다리지 않아도 자동적으로 블로킹하면서
제네릭에서 지정된 자료형인 <Unit>은 생략 가능하다.

코틀린 1.3 버전부터는 다음과 같이 main() 함수에도 suspend를 지정할 수 있다.

suspend fun main() = coroutineScope {   // 코틀린 1.3 부터는 main() 함수에 suspend 지정 가능

runBlocking()은 다음과 같이 클래스 내의 멤버 메서드에서도 사용할 수 있다.
class MyTest {
    ...
    fun mySuspendMethod() = runBlocking<Unit> {
        // 코드
    }
}
