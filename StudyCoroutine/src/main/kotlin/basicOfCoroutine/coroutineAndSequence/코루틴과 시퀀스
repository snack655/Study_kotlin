코루틴과 시퀀스

코틀린의 표준 라이브러리 중에서 sequence()를 사용하면
아주 많은 값을 만들어 내는 코드로부터 특정 값의 범위를 가져올 수 있다.
sequence() 함수는 Sequence<T>를 반환하는데
Sequence() 함수 내부에서 지연 함수를 사용할 수 있고
코루틴과 함께 최종 형태를 나중에 결정할 수 있는 늦은(lazy) 시퀀스를 만들 수 있다.
늦은 시퀀스란 특정 요소가 완전히 구성되기 전에 사용 범위와 시점을 결정할 수 있다는 뜻이다.

예를 들면 무제한 스크롤링을 구현하는 UI에 적용할 목록을 가져올 때 이용할 수 있다.
그러면 Sequence() 함수의 선언부를 살펴보자.

@SinceKotlin("1.3")
public fun <T> sequence(@BuilderInference block: suspend SequenceScope<T>.() -> Unit):
Sequence<T> = Sequence { iterator(block) }
...
public inline fun <T> buildSequence(@BuilderInference noinline builderAction: suspend SequenceScope<T>.() -> Unit):
Sequence<T> = Sequence { iterator(builderAction) }

람다식을 넘겨받은 block을 보면 suspend로 정의되어 있음을 알 수 있다.
그리고 SequenceScope를 통해 확장 함수를 실행한다.
