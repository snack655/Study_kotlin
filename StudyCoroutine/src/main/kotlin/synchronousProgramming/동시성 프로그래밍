동시성 프로그래밍

프로그래밍에서 순서대로 작업을 수행하여 1개의 루틴을 완료한 후 다른 루틴을 실행하는 방식을 동기적(synchronous)으로 수행한다고 한다.
현재의 프로그래밍은 순차적인 프로그램보다 다양한 기능이 한꺼번에 일어나는 다중 실행 환경에 있는 경우가 많아졌다.

예를 들면 화면에서 로딩되는 UI를 보여줄 때 네트워크는 데이터를 다운로드해야 하고,
목록을 끌어올리면 지속적으로 UI를 갱신하며 아이템 목록을 업데이트하는 경우가 대표적인 다중 작업 프로그램이다.

이렇듯 여러 개의 루틴이 선행 작업의 순서나 완료 여부와 상관없이 실행되는 방식을 비동기적(asynchronous)라고 한다.
이러한 비동기 프로그래밍은 RxJava, Reactive와 같은 서드파티(third-party) 라이브러리에서 제공하고 있다.

코틀린에서는 코루틴(Coroutine)을 서드파티가 아닌 기본으로 제공하고 있다.
하나의 개별적인 작업을 루틴(routine)이라고 부르는데
코루틴이란 여러 개의 루틴들이 협력(co)한다는 의미로 만들어진 합성어이다.

순차적으로 루틴을 실행하는 동기 코드는 코드의 복잡도가 낮다.
하지만 코드의 여러 구간에서 요청된 작업이 마무리가 될 때까지 멈춰 있는 현상이 나타나게 된다.
이를 블로킹된 코드라고 부른다.
여기저기 블로킹된 코드를 개선하고 성능을 향상하려던 넌블로킹 기법의 코드를 구성해야 한다.
보통 다중 작업을 하려면 스레드와 같은 비동기 코드를 작성해야 하는데 이때 코드가 복잡해진다.

하지만 코틀린의 코루틴을 사용하면 넌블로킹(Non-blocking) 또는 비동기 코드를
마치 동기 코드처럼 쉽게 작성하면서도 비동기 효과를 낼 수 있다.
