이벤트 루프

넌블로킹과 비동기 프로그래밍을 구현하다 보면 관련 라이브러리를
많이 접할 수 있게 된다.
예를 들면 코릍린에 Promises를 추가한 Kovenant나 가벼운 스레드를 제공하는 Quasar,
비동기 이벤트 방식의 I/O 모델을 지원하는 libuv와 같은 라이브러리가 있다.
보통 이러한 라이브러리를 통해 이벤트 처리를 위한 프로그래밍 모델을 만들기 위해
이벤트 루프(Event Loop)를 사용하곤 한다.
그러면 이벤트 루프란 무엇일까?

먼저 웹 어플리케이션을 만든다고 생각해 보자.
네트워크도 연결해야 하고 UI도 구성해야 한다.
또한 네트워크로 무언가 받고 있는 도중에도
사용자가 화면에 존재하는 목록이나 버튼을 클릭하면 즉각 응답해 주어야 한다.
사용자와 상호작용하기 위해서는 항상 이벤트를 기다리며 감시하는 주체가 필요하며(wait for event),
이벤트가 발생하면 이것을 처리(dispatch)하기 위해 특정 루틴을 동작시켜야 한다.
바로 이러한 것들이 이벤트 루프가 할 일이다.

이벤트 루프는 각 이벤트 요청에 대한 이벤트 큐를 가지며
이벤트 큐는 이벤트 루프에 의해 처리할 핸들러인 작업자 스레드가 결정되어 실행된다.
이벤트 큐의 실행이 끝나면 이벤트 루프에 의해 다시 이벤트 큐의 위치로 돌아간다.