무변성

제네릭 클래스를 인스턴스화할 때 서로 다른 자료형을 인자로 사용하려면 자료형 사이의 상, 하위 관계를 잘 따져야 한다.
다음과 같은 자료형을 처리한다고 생각해보자.

    Any
     ^
    Int
     ^
  Nothing

만약 형식 매개변수에 in이나 out 등으로 공변성이나 반공변성을 따로 지정하지 않으면
무변성(Invariance)으로 제네릭 클래스가 선언!

다음 소스 코드는 무변성으로 선언된 제네릭 클래스 Box<T>와 객체를 만들 때 상하 관계를 가지고 있는
Any, Int형 자료형과 하상 관계를 가지고 있는 Nothing, Int형 자료형을 형식 매개변수의 인자로 사용하고 있다.
이런 경우 상하 관계를 잘 따졌어도 Box<T>가 무변성이므로 자료형 불일치 오류를 발생시킨다.

// 무변성(Invariance) 선언
class Box<T>(val size: Int)

fun main() {
    val anys: Box<Any> = Box<Int>(10)   // 오류! 자료형 불일치
    val nothings: Box<Nothing> = Box<Int>(20)   // 오류! 자료형 불일치
}


