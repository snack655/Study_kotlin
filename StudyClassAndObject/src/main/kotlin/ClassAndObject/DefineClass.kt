package ClassAndObject

/**
 클래스 선언하기

 앞의 다이어그램에 나타난 클래스를 코드에서 선언하는 다양한 방법을 알아보자.
 클래스를 선언하려면 class 키워드가 필요하다.
 먼저 가장 기본적인 형태의 정의를 사용

 class Bird {  }   // 내용이 비어 있는 클래스 선언
 class Bird   // 중괄호 생략 가능

 Bird라는 이름의 클래스를 선언
 특별히 프로퍼티와 메서드를 정의하지 않고 이렇게 빈 형태로 클래스를 선언
 이때는 중괄호 생략 가능!

 내용을 기술하기 위해서는 중괄호({})를 이용해 블록을 구성
 class Bird {
    // 프로퍼티
    // 메서드
 }
 */

class Bird { // 1. 클래스 정의
    // 2. 프로퍼티(속성)
    var name: String = "myBird"
    var wing: Int = 2
    var beak: String = "short"
    var color: String = "blue"

    // 3. 메서드(함수)
    fun fly() = println("Fly wing: $wing")
    fun sing(vol: Int) = println("Sing vol: $vol")
}

fun main() {
    val coco = Bird()   // 4. 클래스의 생성자를 통한 객체의 생성
    coco.color = "blue" // 5. 객체의 프로퍼티에 값 할당

    println("coco.color : ${coco.color}")
    coco.fly() // 객체의 멤버 메서드 사용
    coco.sing(3)
}

/**
 객체와 인스턴스 정리하기

 새, Bird라는 표현은 모든 새를 가리키는 개념일 뿐 실제 살아서 움직이는 것이 아님!
 다시 컴퓨터의 세계에서 말하자면
 Bird 클래스란 일종의 선언일 뿐 실제 메모리에 존재해 실행되고 있는 것이 아님!
 이 클래스로부터 객체(Object)를 생성해야만 비로소 클래스라는 개념의 실체인 객체가 물리적인 메모리 영역에서 실행!

 이것을 객체 지향 언어에서는 구체화 또는 인스턴스화(Instantiate)되었다고 이야기한다.
 그래서 메모리에 올라간 객체를 인스턴스(Instance)라고 한다.

 보통 객체와 인스턴스는 동일한 용어로 취급하지만
 좀 더 정확히 표현하면 특정 클래스로부터 만들어진 객체는 그 클래스의 인스턴스라고 불린다.
 객체는 좀 더 포괄적인 용어로 특정 클래스가 아닌 모든 실체화된 것들을 가리킴.

 이름 모를 새에게 coco라는 이름을 지어주면 새라는 추상적인 개념이 coco라는 구체적인 객체가 된 것.
 그렇게 지정하는 것이 인스턴스화!

 'Bird 클래스로부터 coco라는 객체가 생성됩니다.'라고 표현하기도 하지만 거꾸로
 'coco는 Bird 클래스의 인스턴스입니다.'라고 할 수 있다.
 객체는 다음과 같이 var나 val로 선언할 수 있다.
 val coco = Bird()

 위 코드를 보면 객체를 생성할 때 클래스 이름 뒤에 Bird()처럼 소괄호 ()가 사용되고 있다.
 이것은 클래스로부터 객체를 성성하는 특별한 함수인 생성자를 의미한다.
 생성자란 객체를 생성할 때 자동으로 실행되는 함수!
 */
