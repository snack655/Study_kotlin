객체 지향 프로그래밍(OOP: Object-Oriented Programming)이란?
프로그램의 구조를 객체 간 상호작용으로서 표현하는 프로그래밍 방식이다.

코틀린은 함수형 프로그래밍과 더불어 객체 지향 프로그래밍 기법을 지원!
객체 지향 기법으로 프로그램을 설계할 때는 다음과 같은 개념을 알아 두어야 한다.

- 추상황(Abstraction) : 특정 클래스를 만들 때 기본 형식을 규정하는 방법
- 인스턴스(Instance) : 클래스로부터 생성한 객체
- 상속(Inheritance) : 부모 클래스의 내용을 자식 클래스가 그대로 물려받음
- 다향성(Polymorphism) : 하나의 이름으로 다양한 처리를 제공
- 캡슐화(Encapsulation) : 내용을 숨기고 필요한 부분만 사용
- 메시지 전송(Message Sending) : 객체 간에 주고받는 메시지
- 연관(Association) : 클래스 간의 관계

< 객체 지향 프로그래밍과 용어 >
객체 지향 프로그래밍의 용어 정리

코틀린에서 사용하는 용어  |  다른 언어에서 사용하는 용어
클래스(Class)          분류, 범주
프로퍼티(Property)      속성(Attribute), 변수(Variable), 필드(Field), 데이터(Data)
메서드(Method)         함수(Function), 동작(Operation), 행동(Behavior)
객체(Object)           인스턴스(Instance)


자바에서는 클래스에 포함된 기능을 나타내는 함수를 메서드(Method), 변수를 필드(Field)라고 한다.
메서드나 필드는 클래스 내부에 정의되므로 클래스의 멤버 메서드, 멤버 필드라고도 한다.
코틀린에서는 필드 대신에 프로퍼티(Property)라는 용어를 쓰는데
그 이유는 변수 또는 필드에 내부적으로 접근 메서드가 포함되어 있기 때문이다.

클래스의 멤버가 될 수 있는 것에는 다음과 같은 것이 있습니다.
- 생성자와 초기화 블록 : 객체가 생성될 때 자동 실행되는 메서드 또는 코드 블록
- 프로퍼티 : 변수의 이름과 변수의 접근 함수가 포함된 상태
- 메서드 : 일반적인 함수의 형태
- 중첩(Nested) 클래스와 이너(Inner) 클래스 : 클래스 내부에 구성되는 클래스
- 객체 선언 : 클래스 없이 접근할 수 있는 객체

[클래스 다이어그램]


