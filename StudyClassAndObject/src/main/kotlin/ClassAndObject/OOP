객체 지향 프로그래밍(OOP: Object-Oriented Programming)이란?
프로그램의 구조를 객체 간 상호작용으로서 표현하는 프로그래밍 방식이다.

코틀린은 함수형 프로그래밍과 더불어 객체 지향 프로그래밍 기법을 지원!
객체 지향 기법으로 프로그램을 설계할 때는 다음과 같은 개념을 알아 두어야 한다.

- 추상황(Abstraction) : 특정 클래스를 만들 때 기본 형식을 규정하는 방법
- 인스턴스(Instance) : 클래스로부터 생성한 객체
- 상속(Inheritance) : 부모 클래스의 내용을 자식 클래스가 그대로 물려받음
- 다향성(Polymorphism) : 하나의 이름으로 다양한 처리를 제공
- 캡슐화(Encapsulation) : 내용을 숨기고 필요한 부분만 사용
- 메시지 전송(Message Sending) : 객체 간에 주고받는 메시지
- 연관(Association) : 클래스 간의 관계

< 객체 지향 프로그래밍과 용어 >
객체 지향 프로그래밍의 용어 정리

코틀린에서 사용하는 용어  |  다른 언어에서 사용하는 용어
클래스(Class)          분류, 범주
프로퍼티(Property)      속성(Attribute), 변수(Variable), 필드(Field), 데이터(Data)
메서드(Method)         함수(Function), 동작(Operation), 행동(Behavior)
객체(Object)           인스턴스(Instance)


자바에서는 클래스에 포함된 기능을 나타내는 함수를 메서드(Method), 변수를 필드(Field)라고 한다.
메서드나 필드는 클래스 내부에 정의되므로 클래스의 멤버 메서드, 멤버 필드라고도 한다.
코틀린에서는 필드 대신에 프로퍼티(Property)라는 용어를 쓰는데
그 이유는 변수 또는 필드에 내부적으로 접근 메서드가 포함되어 있기 때문이다.

클래스의 멤버가 될 수 있는 것에는 다음과 같은 것이 있습니다.
- 생성자와 초기화 블록 : 객체가 생성될 때 자동 실행되는 메서드 또는 코드 블록
- 프로퍼티 : 변수의 이름과 변수의 접근 함수가 포함된 상태
- 메서드 : 일반적인 함수의 형태
- 중첩(Nested) 클래스와 이너(Inner) 클래스 : 클래스 내부에 구성되는 클래스
- 객체 선언 : 클래스 없이 접근할 수 있는 객체

[클래스 다이어그램]
클래스를 이해하기 쉽게 표현하려면 통합 모델링 언어(UML: Unified Modeling Language)를 사용한다.
UML은 객체 지향 프로그램 설계를 위한 다이어그램 표기법으로 개발 단계에서 팀의 의사소통을 원활히 하는 데 도움을 준다.
UML에는 여러 개의 다이어그램 기법이 있는데 대표적인 것으로 다음과 같은 것이 있다.
- 클래스 다이어그램(Class Diagram) : 클래스의 정의와 관계를 나타내는 다이어그램
- 시퀀스 다이어그램(Sequence Diagram) : 시간의 개념을 통해 클래스에서 생성된 객체의 실행 흐름을 나타냄
- 유스 케이스 다이어그램(Use Case Diagram) : 사용자 관점에서 사용 방법에 대해 설명
- 상태 머신 다이어그램(State-Machine Diagram) : 시스탬 관점에서 상태가 어떻게 변화하는지 나타냄

다음은 클래스 다이어그램으로 Bird 클래스를 표현

|------------------------|
| Bird                   | <- 클래스 이름
|------------------------|
| - name: String         |
| - wing: Int = 2        | <- 프로퍼티
| - break: String        |
| - color: String        |
|------------------------|
| + fly(): Unit          | <- 메서드
| + sing(Vol: Int): Unit |
|------------------------|

클래스 다이어그램은 다음과 같이 3개의 상자로 이루어져
클래스 이름, 프로퍼티, 메서드를 손쉽게 파악할 수 있다.

때로는 프로퍼티나 메서드 부분의 상자를 생략할 수 있다.
프로퍼티나 메서드 앞에는 +나 -와 같이 가시성을 나타내는 기호를 사용할 수 있다.
여기서 -는 private을 의미하며 +는 public을 의미한다.

시퀀스 다이어그램 : 객체 간의 실행 순서를 보기에 적합
유스 케이스 다이어그램 : 시스템에 사용자가 어떤 식으로 접근해 사용할 것인지
상태 머신 다이어그램 : 객체의 상태 변화를 볼 수 있다.

그 밖의 많은 다이어그램이 있다.