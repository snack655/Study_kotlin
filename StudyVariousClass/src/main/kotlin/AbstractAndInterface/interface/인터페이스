인터페이스

인터페이스에는 abstract로 정의된 추상 메스드나 일반 메서드가 포함된다.
다른 객체 지향 언어와는 다르게 메서드에 구현 내용이 포함될 수 있다.
하지만 추상 클래스처럼 프로퍼티를 통해 상태를 저장할 수 없다.
선언만 할 수 있다.
인터페이스 또한 객체를 생성할 수 없고 하위 클래스를 통해 구현 및 생성해야 한다.

좀 더 쉽게 말핟자면 인터페이스는 현실 세계의 '계약서'와 비슷하다.
계약서에는 무엇 무엇을 하라는 추상적인 활동이 적혀 있다.
이것을 어떤 '작업자'가 받아들인다면 계약서에 있는 활동의 구체적인 내용을 반드시 실행해야 한다.
계약서 자체로는 실행이 되지 않는다.
작업자에 의해 구체적인 작업이 구현되어야 실행되는 것이다.
그래서 인터페이스를 다른 말로 표현하면 '기본 설계도'라고 말할 수 있다.

그렇다면 추상 클래스와 용도가 비슷해 보이는데 인터페이스를 쓰는 이유가 무엇일까?
일단 추상 클래스를 쓸 때 제한을 생각해보자.
추상 클래스도 기본적으로 클래스이기 때문에 상속을 통해 하위 클래스로 확장해 나갈 수 있다.
하위 클래스는 상속 하나만 허용하기 때문에 2개 이상의 클래스로부터 프로퍼티나 메서드를 상속받을 수 없다는 단점이 있다.
그리고 상위 클래스와 하위 클래스에 강한 연관이 생기면서 하위 클래스는 상위 클래스의 영향을 받는다.
예를 들어 상위 클래스가 정의한 내용이 불완전하다면 그 상위 클래스를 상속받은 하위 클래스도 그대로 영향을 받는다.
그래서 상위 클래스가 수정되었을 때 하위 클래스를 일일이 확인하기 어려운 경우에 부작용을 발생시킬 수 있다는 단점!

그렇다면 인터페이스는 어떨까?
먼저 인터페이스는 클래스가 아니다.
따라서 상속이라는 형태로 하위 클래스에 프로퍼티와 메서드를 전하지 않는다.
그래서 하위 클래스보다는 구현 클래스라고 이야기 한다.
이런 구현 클래스의 목적은 인터페이스가 제시한 메서드를 구체적으로 '구현'한다는 데 있다.
그리고 인터페이스는 구현 클래스와 강한 연관을 가지지 않는다.
상속은 하나만 허용했으나 인터페이스는 원하는 만큼 구현 클래스에 붙여서 필요한 메서드를 구현해 내면 된다.
인터페이스가 바뀐다고 할지라도 그것을 구현하는 클래스에는 영향을 끼치지 않게 할 수 있다.
