연산자의 작동 방식

연산자를 사용하려면 관련된 멤버 메서드를 호출하는 것과 같다.
예를 들어 a + b는 a.plus(b)라는 함수가 내부적으로 호출되는 것이다.
사실 +와 -같은 연산자는 기본적으로 많은 자료형을 처리하기 위해 이미 오버로딩 되어 있다.

val a = 5
val b = 10
print(a.plus(b)) // print(a + b)와 동일

정수형을 더하기 위해 a + b를 사용할 수 있는데 이것은 a.plus(b) 형태로 호출하는 것과 같다.
기본형을 위한 오버로딩된 plus() 함수를 나열하면 다음과 같다.

// 표준 라이브러리의 Primitives.kt 파일의 일부

// 기본형을 위한 + 인자
operator fun plus(other: Byte): Int
operator fun plus(other: Short): Int
operator fun plus(other: Int): Int
operator fun plus(other: Long): Long
operator fun plus(other: Float): Float
operator fun plus(other: Double): Double

// 문자열 연결
operator fun String?.plus(other: Any?): String

코틀린 표준 라이브러리에서 Primitives.kt를 살펴보면 operator 키워드를 사용해
plus() 함수가 다양한 자료형으로 선언되어 있는 것을 알 수 있다.
바로 오버로딩되어 있다는 것이다.
함수 이름과 더한다는 동작에는 변함이 없으나 매개변수가 서로 다른다.
이런 이유로 앞에서 더한 Int형 이외에도 Byte형, Short형 등을 합할 수 있으며
심지어 문자열 String형도 합할 수 있다.
문자열의 매개변수는 Any형으로 지정되어 있으므로 어떤 자료형이든 받아들이고 이것을 합쳐서 String형으로 반환한다.
필요하다면 사용자가 추가적으로 함수를 오버로딩할 수 있다.