내부 클래스 기법

코틀린은 2가지의 내부 클래스 기법이 있다.
먼저 중첩(Nested) 클래스는 말 그대로 클래스 안에 또 다른 클래스가 정의되어 있는 것이다.
또 하나의 내부 클래스로 이너(Inner) 클래스라는 개념이 있다.
중첩 클래스와 이너 클래스는 둘 다 특정 클래스 내부에 있는 것이지만 사용 방법이 약간 다르다.
그 밖에도 지역 클래스와 익명 객체 방법으로도 내부 클래스를 정의할 수 있다.

클래스 내부에 또 다른 클래스를 설계하여 내부에 두는 이유는 독립적인 클래스로 정의하기 모호한 경우나
다른 클래스에서는 잘 사용하지 않는 내부에서만 사용하고 외부에서는 접근할 필요가 없을 때가 있기 때문이다.
하지만 너무 남용하면 클래스의 의존성이 커지고 코드가 읽기 어렵게 되므로 주의하자.


자바의 내부 클래스 종류

종류 : 역할
정적 클래스(Static Class) : static 키워드를 가지며 외부 클래스를 인스턴스화하지
                         않고 바로 사용 가능한 내부 클래스(주로 빌더 클래스에 이용)
멤버 클래스(MemberClass) : 인스턴스 클래스로도 불리며 외부 클래스의 필드나 메서드와 연동하는 내부 클래스
지역 클래스(Local Class) : 초기화 블록이나 메서드 내의 블록에서만 유효한 클래스
익명 클래스(Anonymous Class) : 이름이 없고 주로 일회용 객체를 인스턴스화하면서 오버라이드 메서드를 구현하는 내부 클래스.
                            가독성이 떨어지는 단점이 있다.

자바의 내부 클래스는 외부 클래스의 어떤 멤버 필드도 참조할 수 있다.
반대로 외부 클래스도 내부 클래스의 필드에 접근할 수 있다.
이런 개념을 코틀린에서도 비슷하게 사용할 수 있다.

자바와 코틀린의 내부 클래스 비교
자바 <> 코틀린
정적 클래스(Static Class) <> 중첩 클래스(Nested Class): 객체 생성 없이 사용 가능
멤버 클래스(Member Class) <> 이너 클래스(Inner Class): 필드나 메서드와 연동하는 내부 클래스로 inner 키워드가 필요하다.
지역 클래스(Local Class) <> 지역 클래스(Local Class): 클래스의 선언이 블록 안에 있는 지역 클래스이다.
익명 클래스(Anonymous Class) <> 익명 객체(Anonymous Object): 이름이 없고 주로 일회용 객체를 사용하기 위해 object 키워드를 통해 선언된다.

정적 클래스와 멤버 클래스가 두 언어에서 반대로 되어 있으니 헷갈지지 말자.
먼저 자바의 멤버 클래스와 코틀린의 이너 클래스이다.

// 자바의 멤버(이너) 클래스
class A {
    class B {
        ... // 외부 클래스 A 필드에 접근 가능
    }
}

// 코틀린의 이너 클래스
class A {
    inner class B { // 자바와 달리 inner 키워드 필요
        ... // 외부 클래스 A의 필드에 접근 가능
    }
}

이번에는 자바의 정적 클래스와 코틀린에서 정적 클래스처럼 사용하는 중첩 클래스이다.
// 자바의 정적 클래스
class A {
    static class B {    // 정적 클래스를 위해 static 키워드 사용
        ...
    }
}

// 정적 클래스처럼 사용한 코틀린의 중첩 클래스
class A {
    class B {   // 코틀린에서는 아무 키워드가 없는 클래스는 중첩 클래스이며 정적 클래스처럼 사용
        ... // 외부 클래스 A의 프로퍼티, 메서드에 접근할 수 없음
    }
}


