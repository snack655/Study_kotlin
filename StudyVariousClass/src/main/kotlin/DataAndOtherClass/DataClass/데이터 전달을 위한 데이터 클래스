데이터 전달을 위한 데이터 클래스

보통 데이터 전달을 위한 객체를 DTO(Data Transfer Object)라고 부른다.
자바에서는 POJO(Plain Old Java Object)라고 부르기도 했다.
DTO는 구현 로직을 가지고 있지 않고 순수한 데이터 객체를 표현하기 때문에 보통 속성과
속성을 접근하고 하는 게터/세터를 가진다.
여기에 추가적으로 toString(), equals() 등과 같은 데이터를 표현하거나 비교하는 메서드를 가져야 한다.
자바에서는 이것들을 모두 정의하려면 소스 코드가 아주 길어어지게 되지만 코틀린에서는 간단하게 표현할 수 있다.

코틀린에서는 DTO를 위해 데이터 클래스를 정의할 때 게터/세터, toString(), equals() 같은
메서드를 직접 만들 필요 없이 내부적으로 자동 생성된다!
데이터를 위한 프로퍼티만 신경 써서 작성하면 된다.
코틀린의 데이터 클래스에서 내부적으로 자동 생성되는 메서드는 다음과 같다.
- 프로퍼티를 위한 게터/세터
- 비교를 위한 equals()와 키 사용을 위한 hashCode()
- 프로퍼티를 문자열로 변환해 순서대로 보여주는 toString()
- 객체 복사를 위한 copy()
- 프로퍼티에 상응하는 component1(), component2() 등

코틀린에서 프로퍼티를 선언하면 게터와 세터가 자동으로 준비된다.
코틀린의 프로퍼티 = 필드(변수) + 게터와 세터
그렇다면 왜 DTO를 사용해야 할까?
일종의 표준과 같은 약속을 정하면 전송하거나 받고자 하는 어떤 요소든 데이터를 쉽게 다룰 수 있기 때문이다.

